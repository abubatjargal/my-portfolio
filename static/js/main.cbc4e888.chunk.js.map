{"version":3,"sources":["profile-image.jpg","Components/NavigationBar.js","Components/CV/CVSummary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","HideAppBar","React","useState","anchorEl","setAnchorEl","handleClose","Fragment","CssBaseline","AppBar","color","Toolbar","Grid","container","justify","item","Typography","variant","spacing","style","marginLeft","alignItems","Button","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","darkMode","IconButton","toggleDarkMode","CVSummary","isDesktop","useMediaQuery","xs","marginTop","lg","height","Card","marginRight","CardContent","src","profileImage","alt","borderRadius","endIcon","cvJson","theme","displayDataTypes","enableClipboard","textAlign","padding","App","setDarkMode","createMuiTheme","palette","type","className","ThemeProvider","Box","width","overflow","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cbc4e888.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile-image.a1744866.jpg\";","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Slide from '@material-ui/core/Slide';\nimport { Button, Grid, IconButton, Menu, MenuItem } from '@material-ui/core';\nimport LightModeIcon from '@material-ui/icons/Brightness4Outlined';\nimport DarkModeIcon from '@material-ui/icons/Brightness4';\n\nfunction HideOnScroll(props) {\n    const { children, window } = props;\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n    const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n    return (\n        <Slide appear={false} direction=\"down\" in={!trigger}>\n            {children}\n        </Slide>\n    );\n}\n\nHideOnScroll.propTypes = {\n    children: PropTypes.element.isRequired,\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    window: PropTypes.func,\n};\n\n\nexport default function HideAppBar(props) {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <HideOnScroll {...props}>\n                <AppBar color=\"primary\">\n                    <Toolbar>\n                        <Grid container direction=\"row\" justify=\"space-between\">\n                            <Grid item>\n                                <Typography variant=\"h6\">Abu's Portfolio</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Grid container direction=\"row\" spacing={3} style={{ marginLeft: 'auto' }} alignItems=\"center\">\n                                    <Grid item>\n                                        <Button color=\"inherit\" variant=\"outlined\">Curriculum Vitae</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Button color=\"inherit\" variant=\"outlined\" onClick={handleMenu}>Projects</Button>\n                                    </Grid>\n                                    <Grid item>\n                                        <Menu\n                                            id=\"simple-menu\"\n                                            anchorEl={anchorEl}\n                                            keepMounted\n                                            open={Boolean(anchorEl)}\n                                            onClose={handleClose}\n                                        >\n                                            <MenuItem onClick={handleClose}>Undergraduate Projects</MenuItem>\n                                            <MenuItem onClick={handleClose}>Personal Projects</MenuItem>\n                                        </Menu>\n                                        <Grid />\n                                        <Grid item>\n                                            {props.darkMode ?\n                                                (\n                                                    <IconButton onClick={props.toggleDarkMode}>\n                                                        <LightModeIcon />\n                                                    </IconButton>\n                                                ) : (\n                                                    <IconButton onClick={props.toggleDarkMode}>\n                                                        <DarkModeIcon />\n                                                    </IconButton>\n                                                )\n                                            }\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Toolbar>\n                </AppBar>\n            </HideOnScroll>\n            <Toolbar />\n        </React.Fragment>\n    );\n}","import { Button, Card, CardContent, Grid, Icon, Typography } from '@material-ui/core';\nimport React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ReactJson from 'react-json-view';\nimport cvJson from './cv.json';\nimport profileImage from '../../profile-image.jpg';\nimport RightArrowIcon from '@material-ui/icons/ArrowForwardIos'\n\nfunction CVSummary() {\n    const isDesktop = useMediaQuery('(min-width:600px)');\n    return (\n        <Grid item xs={12} style={{ marginTop: 40 }}>\n            <Grid container justify=\"center\" alignItems=\"center\">\n                <Grid item xs={12} lg={2} style={{ height: \"100%\" }}>\n                    <Card variant=\"outlined\" style={{ marginRight: isDesktop ? 40 : 0 }}>\n                        <CardContent>\n                            <Grid container direction=\"column\" justify=\"space-between\" spacing={2}>\n                                <Grid item xs={12}>\n                                    <img src={profileImage} alt=\"profile-image\" style={{ borderRadius: \"50%\" }} />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Typography variant=\"h6\">Summary</Typography>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <Button color=\"primary\" variant=\"outlined\" endIcon={<RightArrowIcon />}>View Details</Button>\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={12} lg={4}>\n                    <ReactJson src={cvJson} theme=\"hopscotch\" displayDataTypes={false} enableClipboard={false} style={{ textAlign: 'left', padding: 20 }} />\n                </Grid>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default CVSummary;","import React, { useState } from 'react';\nimport profileImage from './profile-image.jpg';\nimport './App.css';\nimport NavigationBar from './Components/NavigationBar';\nimport CVSummary from './Components/CV/CVSummary';\nimport { Box, createMuiTheme, Grid, Switch, ThemeProvider } from '@material-ui/core';\nimport { blue, green } from '@material-ui/core/colors';\n\n\nfunction App() {\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  const theme = createMuiTheme({\n    palette: {\n      type: darkMode ? \"dark\" : \"light\"\n    }\n  })\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode)\n  }\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <Grid container justify=\"center\">\n          <Box width={1800} style={{ overflow: 'hidden' }}>\n            <NavigationBar darkMode={darkMode} toggleDarkMode={toggleDarkMode}/>\n            <CVSummary />\n          </Box>\n        </Grid>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}